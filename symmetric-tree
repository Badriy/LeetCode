class TreeNode:
    
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isSymmetric(self, root):
        

        def is_mirror(node1, node2):
            """
            Helper function that checks if two trees are mirror images of each other.
          
            :param node1: TreeNode, root of the first tree or subtree
            :param node2: TreeNode, root of the second tree or subtree
            :return: bool, true if both trees are mirror images, false otherwise
            """
            # Both nodes are None, meaning both subtrees are empty, thus symmetric
            if node1 is None and node2 is None:
                return True
            # If only one of the nodes is None or if the values don't match, the subtrees aren't mirrors
            if node1 is None or node2 is None or node1.val != node2.val:
                return False
            # Check the outer and inner pairs of subtrees
            return is_mirror(node1.left, node2.right) and is_mirror(node1.right, node2.left)

        # Start the recursion with root as both parameters, as the check is for the tree with itself
        return is_mirror(root, root)
