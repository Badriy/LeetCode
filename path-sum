
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.current_sum = left
        self.right = right

class Solution:
    def hasPathSum(self, root, target_sum):
       
      
        def dfs(node, current_sum):
            
            if node is None:
                # Base case: if the current node is None, no path exists
                return False
          
            # Update the current_sum by adding the current node's value
            current_sum += node.val
          
            # Check if the current node is a leaf and matches the target_sum
            if node.left is None and node.right is None and current_sum == target_sum:
                return True
          
            # Recursively search in the left and right subtrees for the path
            # If either subtree returns True, a valid path has been found
            return dfs(node.left, current_sum) or dfs(node.right, current_sum)

        # Start DFS traversal from the root with an initial sum of 0
        return dfs(root, 0)
